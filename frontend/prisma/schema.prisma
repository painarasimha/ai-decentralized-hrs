// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Phase 1 Models ---

enum Role {
  PATIENT
  DOCTOR
}

enum ConsentStatus {
  PENDING
  APPROVED
  DENIED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  role          Role
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  records       HealthRecord[] @relation("PatientRecords")
  uploads       HealthRecord[] @relation("Uploader")
  requestsMade  ConsentRequest[] @relation("Requester")
  requestsToMe  ConsentRequest[] @relation("Patient")
  accessGrants  AccessGrant[] @relation("UserGrantsAsGrantee")
  grantsGiven   AccessGrant[] @relation("UserGrantsAsGranter")
  auditLogs     AuditLog[]
}

model HealthRecord {
  id            String   @id @default(cuid())
  patientId     String
  patient       User     @relation("PatientRecords", fields: [patientId], references: [id])
  uploadedById  String
  uploadedBy    User     @relation("Uploader", fields: [uploadedById], references: [id])
  title         String
  description   String?
  contentType   String
  sizeBytes     Int
  ipfsCid       String
  fhirMeta      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accessGrants  AccessGrant[]
}

model ConsentRequest {
  id            String   @id @default(cuid())
  requesterId   String
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  patientId     String
  patient       User     @relation("Patient", fields: [patientId], references: [id])
  payload       Json
  status        ConsentStatus @default(PENDING)
  createdAt     DateTime @default(now())
  respondedAt   DateTime?
}

model AccessGrant {
  id            String   @id @default(cuid())
  recordId      String
  record        HealthRecord @relation(fields: [recordId], references: [id])
  granteeId     String
  grantee       User     @relation("UserGrantsAsGrantee", fields: [granteeId], references: [id])
  grantedById   String
  grantedBy     User     @relation("UserGrantsAsGranter", fields: [grantedById], references: [id])
  createdAt     DateTime @default(now())

  @@unique([recordId, granteeId])
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  actor      User     @relation(fields: [actorId], references: [id])
  action     String
  targetId   String?
  meta       Json?
  createdAt  DateTime @default(now())
}
